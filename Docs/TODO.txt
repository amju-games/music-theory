Get to state of minimal, releasable app
 * MVP * 

iOS - load screen, icon, etc. 
 - NOT Using APZ organ image? But it's really appropriate! But is not congruent
    with any of the rest of the design (leaves, growth, fruit, bulbs).

Test on different devices/screen aspect ratios

=============================================

Show ALL topics on BIG tree/plant - but they are disabled until unlocked.
User can scroll up to see them all. Some at the top could be enabled (Zelda)

More topics
 - Next: musical symbols? Or identifying notes, this is a big one.

PagePlayNotes:
 - Stave is white, could just be on mac/desktop GL (vertex colours)


More work on the code design for how we create new Pages. The current Topic
 generates them?
Page factory. Topic txt file has list of page type names.
And how we interleave teaching pages with testing pages.
 - They are all pages, Topic has a list
 - But some pages we only show once? 

NOT MVP
Fix vertex colours on desktop GL

MVP?
Load/save user config
 - Do we need this yet?

Topic start
Should be more interesting - animations, e.g. growing leaves/shoots

NOT MVP:
Button focus image should be scaled according to screen aspect ratio (or image aspect ratio?) Scaling both x and y by same amount is not correct

NOT MVP:
(Topic: show best score so far)

Fix button sizes
 - They are a bit small
 - NOT MVP

NOT MVP:
Topic end state:
Look/feel, 
text should be smart. - HIDE TEXT FOR MVP
Give hints, give stars etc
Next state should be achievements - if none, we go to main menu. Scroll back down to the ground.

NOT MVP:
Main menu: 
 - About button
 - Share button
 - I'm new: go to name entry. Should happen on first run.

NOT MVP:
Avatar + user name

NOT MVP:
Pie slices: 
 - use rotate decorator, just one image
 - allow for 20, 30 slices
 - Should be fruit segments to be congruent with rest of design??

NOT MVP:
Correct answer streaks: start at 3, say

NOT MVP:
Trophies or stars for each topic

NOT MVP:
Break up musical terms into smaller topics. Split up by type: timing, dynamics, etc.


Net Send
Back end DB
 - Don't want to release without tracking

Share - Ok, not MVP but very desirable
 - No screenshots required? Or just baked images.

Storing progress: config file should allow a map type, which is itself a config file - i.e. tree structure.
Then we can add a map for terms seen, weak terms, each attempt if desired, etc.
 - UNIT TEST

Hint pig - it's a piggy bank.

Get awarded different vegetables for each topic?


TopicEnd state - for musical terms, give score, retry button if score < some limit?
Give hints if score > some limit
(Store weak terms)
(Retest weak terms? Like duolingo)

Cosmetic improvements

 - Music: title, menu, GSPages
 - Sound fx: buttons, correct/incorrect etc

 - Consistent CTAs: pulsing, colour change (white <-> green, say)
 - Consistent colours, not just primary colours

 - Fix/finish title/main menu

 - GSPages: Periodically shake hint button if hints are available
 - Grey out hint button if none available
 
 - Fix rotate/scale decorator anchor

 - Top bar: don't use rounded rect, aspect ratio is not same as for images. Use image so we can align elements.

 - Piano Keyboard: proper shaped mesh for each white key. Fix bad curved corners.
    (Not MVP, there is no keyboard yet!)

 - Load time: this is probably the huge font pngs. 
  - TODO Rearrange as a strip with minimal dead space.
  - This is a big job, not for MVP. Automate it? 
  - Subclass TextureSequence to allow variable widths. Reduce dead space on texture, improving load time/mem usage.
  - Draw quad proportional to width [- this allows for a range of slur widths, etc.?? What?] 


(Not MVP)
Every game state can have multiple layouts - 4 currently:
 - Phone landscape
 - Phone portrait
 - Tablet landscape
 - Tablet portrait

But the elements are always the same, with the same names. 
So we can refer to Gui element names in Question/Hint/Answer definitions?
Shouldn't need to.



Gui decorators
 - Colour. Use this for piano dots
 - Swipe-able. Then use this for piano/kb, so we swipe the keys and the piano name.
   - Also for main menu (up/down)




<Quick referesher or back to the story? Or always story, it's not very intrusive.

*Story* state
Hello, I'm Amjula. What's your name?
<User enter name>
Oh, hi <name>!
Let's have a look at you!
<Avatar mod state>
Tap on anything you want to change. Tap on Done to finish. You can always come back to this later!
<Done: pulses?>
<Hair, face etc are tappable and can be edited>
<Done>
<Avatar appears in home position, top left.>
<Pulse avatar, shows what to do>
Just tap if you want to change how you look!
<OK button>
<Stop pulsing avatar>


< Here we want something to do with the grade bosses (trolls, dragons etc) who are blocking the entrance to all the grades.
If you want you can do a test to open it up.
Or no bosses, you just go in?
Boss tests are a bit like mock grade exams. They should cover all the material of the grade, at the appropriate level, right?
>



Dr Memory: check for leaks. Dr Memory crashes on Windows 10? Maybe there is an updated version?
OK, version 1.11.0 works ok
Results are suspiciously good. Continue to test.



Playable keyboard
 - Link Bass midi 
 - sound font asset - find a better piano sound font
 - Just play a sound at start up/periodically for first proof
 - Works for Windows

  - KB element: trying 3D. Alisaing looks bad, 2D may be best.
    In theory 3D could look very nice, needs more work. Use sphere map for refls, render to texture to reduce aliasing.
    And shadows!
    Reflections of the keys in shiny rect behind keys! 
    Improve meshes, add textures to bake ambient occlusion.

    KB responds to music key press events, showing the state of the notes. - DONE, keys go down
    Other events would be note colours, perhaps pulsing, etc.
    Something else generates the key press events?
    OR it all happens internally. We still want to generate events (to play the midi note), and
     respond to events (to show playing music).


If we are going to have some 3D, we can use the Organ MD2, or make something better.

What about 3D avatars? And full on gamification?
 - On the one hand, this could be a massive time suck, but on the other, we want to put a huge distance
   between this and other music theory apps.

 - Can we reuse animals + dinosaurs?
 Dinosaurs are the Grade bosses?
 Amjula could be a cat.
 
Music notation
 - Specialised Text GUI: all one draw command, all one texture atlas
 - Except differently coloured elements; these are another GuiMusicScore object?
 - Proof of concept works (Windows)
 - independent (x, y) scaling works

Music notation: Important remaining unknowns:
 * Bars connecting quavers and shorter notes. This is the #1 problem to solve
 + it works, but we need a layer to make it easier to author.
 - Staves and bar lines should be drawn programatically, not just using scale.
 - Variable-size glyphs: slurs, ties, stave, triplet etc spans
 - Bar lines connecting multiple staves
 - Curly braces connecting staves: find a nice image, will have to stretch it.
 

Next-level layer over GuiMusicScore
 - GuiMusicScore is the bottom level of a decent system. Look at Guido for how to better express music notation. 
 * The key requirement is to highlight individual glyphs
 - Translation layer to convert Guido format to GuiMusicScore?
 - MusicXML? Not important, right? Unless there is a load of music available in this format.

Animated Drawing
 - How to author? 
   - How about this: colour or grey scale image of line drawing, where the colour gets lighter with time. Animated drawing is just raising the threshold of pixels that get drawn. 
    - Grey scale gives 256 animation steps, but then we can also sweep through colours.
    - Nifty, but still hard to author a line drawing with a gradient? We need a vector drawing program. Trying inkscape
    - Actually is probably possible even with PSP, use gradient or blur. The alpha channel keeps the shape. Can use hand drawn music font, ("Reprise"?)

User Drawing
 - Not the same technique as the above.
 - Vec of points/segments. Points won't be contiguous, so we connect them with segments.
 - Rotatable 9-patch (3-patch really, but 9-patch would be more reusable)

 - Fix peculiarities.
     - Test harness where we add coords programmatically

Alternate animated drawing
 - Similar to user drawing, much closer in code terms. Traverse a sequence of line segs, building up a tri list.
 - Problem is how to author this, but each authored glyph can be reused: we could have a library of animated glyphs.

  - Special state where we save out control points from drawings.
  - Could be super advanced: click to place control points, drag them around. (Insert would be useful but harder to implement)
    - May need this if we are doing a lot of drawing





Game state: drag choice to destination rectangle
 - user-draggable GUI type - decorator like Elastic, right?


Assets
 - Buttons in various dimensions
 - Leaves
 - Fruit


